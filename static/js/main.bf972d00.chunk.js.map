{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","props","children","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","console","log","filter","Fragment","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wPA+BeA,EA3BA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAChB,OACE,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,SACS,IACP,0BAAMD,UAAU,oCACbD,MC0BIG,G,6KAjCH,IAAD,OACP,OACE,6BACGC,KAAKC,MAAMC,SACZ,0BAAML,UAAWG,KAAKG,mBAAoBH,KAAKI,eAC/C,4BACEC,QAAS,kBAAM,EAAKJ,MAAMK,YAAY,EAAKL,MAAMM,UACjDV,UAAU,4BAFZ,aAMA,4BACEQ,QAAS,kBAAM,EAAKJ,MAAMO,SAAS,EAAKP,MAAMM,QAAQE,KACtDZ,UAAU,6BAFZ,a,wCAWJ,IAAIa,EAAU,mBAEd,OADAA,GAAgC,IAArBV,KAAKC,MAAMU,MAAc,UAAY,Y,oCAInC,IACLA,EAAUX,KAAKC,MAAMM,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GA9BZC,cCyBPC,E,uKAvBH,IAAD,EAC8Cb,KAAKC,MAAlDa,EADD,EACCA,QAASC,EADV,EACUA,SAAUP,EADpB,EACoBA,SAAUF,EAD9B,EAC8BA,YAErC,OACE,6BACE,4BAAQD,QAASS,EAASjB,UAAU,8BAApC,SAGCkB,EAASC,KAAI,SAACT,GAAD,OACZ,kBAAC,EAAD,CACEU,IAAKV,EAAQE,GACbD,SAAUA,EACVF,YAAaA,EACbC,QAASA,GAET,wCAAcA,EAAQE,a,GAhBXG,aCuDRM,E,4MApDbC,MAAQ,CACNJ,SAAU,CACR,CAAEN,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,K,EAIpBS,gBAAkB,SAACb,GAEjB,IAAMQ,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BM,EAAQN,EAASO,QAAQf,GAC/BQ,EAASM,GAAT,eAAuBd,GACvBQ,EAASM,GAAOV,QAChB,EAAKY,SAAS,CAAER,c,EAGlBS,YAAc,WAEZ,IAAMT,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAACS,GAExC,OADAA,EAAEd,MAAQ,EACHc,KAET,EAAKF,SAAS,CAAER,c,EAGlBW,aAAe,SAACC,GACdC,QAAQC,IAAI,uBAAwBF,GACpC,IAAMZ,EAAW,EAAKI,MAAMJ,SAASe,QAAO,SAACL,GAAD,OAAOA,EAAEhB,KAAOkB,KAC5D,EAAKJ,SAAS,CAAER,c,uDAIhB,OACE,kBAAC,IAAMgB,SAAP,KACE,kBAAC,EAAD,CACEnC,cAAeI,KAAKmB,MAAMJ,SAASe,QAAO,SAACL,GAAD,OAAOA,EAAEd,MAAQ,KAAGqB,SAEhE,0BAAMnC,UAAU,aACd,kBAAC,EAAD,CACEkB,SAAUf,KAAKmB,MAAMJ,SACrBD,QAASd,KAAKwB,YACdlB,YAAaN,KAAKoB,gBAClBZ,SAAUR,KAAK0B,qB,GA7CTd,aCOZqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfuB,UAAUC,cAAcQ,YAI1BvB,QAAQC,IACN,iHAKEY,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBlB,QAAQC,IAAI,sCAGRY,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACL3B,QAAQ2B,MAAM,4CAA6CA,M,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,sBAAwB1B,OAAOC,SAAStC,MACpDgE,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,sBAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAY7C,QAAQ,cAG5CoB,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BV,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL1B,QAAQC,IACN,oEAvFA4C,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCjB,QAAQC,IACN,iHAMJU,EAAgBC,EAAOC,OCtC/BE,I","file":"static/js/main.bf972d00.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n// Stateless Functional Componenet\n\nconst NavBar = ({ totalCounters }) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Navbar{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n// class NavBar extends Component {\n//   render() {\n//     return (\n//       <nav className=\"navbar navbar-light bg-light\">\n//         <a className=\"navbar-brand\" href=\"#\">\n//           Navbar{\" \"}\n//           <span className=\"badge badge-pill badge-secondary\">\n//             {this.props.totalCounters}\n//           </span>\n//         </a>\n//       </nav>\n//     );\n//   }\n// }\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.children}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    const { onReset, counters, onDelete, onIncrement } = this.props;\n\n    return (\n      <div>\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            counter={counter}\n          >\n            <h4>Counter #{counter.id}</h4>\n          </Counter>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleIncrement = (counter) => {\n    //   increase values by 1\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    //   update counters values to 0\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    console.log(\"event handler called\", counterId);\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}